[extension_name]
Twitch Clip Link Handler
[extension_info]
@name: Twitch Clip Link Handler, @version: 1.4 , @author: LeonWong93
Base on "YouTube Video Duration" by Christina K.
Specially modified/enhanced for the purpose of use by myself and/or Epi's SAMMI gang
[insert_external]
<div>
<p>Twitch Clip Link Handler v1.4 by LeonWong93 is installed</p>
- Base on an extension call "YouTube Video Duration" by Christina K.
<br>- Specially modified/enhanced for the purpose of use by myself and/or Epi's SAMMI gang
<br><br>Greetings from Leon : Have fun on streaming guys =D
</div>
<br>
<div>
<button type="button" onclick="twitch_clip_link_test()">Test Result</button>
<br>
Twitch Clip Link: <input type="text" id="twitch_link" size="50" style="margin:5px 0px"; value="https://www.twitch.tv/epivictus/clip/EndearingSullenDragonMingLee-n9M0XBxaHwcpCrJ5?filter=clips&range=all&sort=time">
<br>
Auth Token: <input type="text" id="auth_token" size="20" style="margin:5px 0px"; value="Auth Token Here">
</div>
[insert_command]

SAMMI.extCommand('Twitch Clip Link Handler', 3355443, 52, {
  string_link:['String - Link',15,'',1.],
  string_auth_token:['String - Auth Token',15,'global.auth_token',1.30],
  variable_clipid:['Variable - ID',14,'ttv_clipid',1],
  variable_title:['Variable - Title',14,'ttv_title',1],
  variable_duration:['Variable - Duration',14,'ttv_duration',1.30],
  variable_valid:['Variable - Valid',14,'ttv_valid',1],
  debug_info:['Debug',2,false,0.40],
})

[insert_hook]
case "Twitch Clip Link Handler":{
TCLinkHandler(SAMMIJSON.string_link,SAMMIJSON.string_auth_token,SAMMIJSON.variable_clipid,SAMMIJSON.variable_title,SAMMIJSON.variable_duration,SAMMIJSON.variable_valid,SAMMIJSON.debug_info)
}break
[insert_script]
function TCLinkHandler(string_link, string_auth_token, variable_clipid, variable_title, variable_duration, variable_valid, debug_info) {

var link_valid = false;

	startSeconds = string_link.replace(/(list=|sort=|tt_content=)/g,"").split("t=")[1];
    if (startSeconds == undefined) {
      startSeconds = '0';
     } else {
      startSeconds = parseInt(startSeconds);
      startSeconds = startSeconds*1000;
    }

    var ID = '';
    url = string_link.replace(/^https?:\/\//, '').split(/[/?]/);
    if (url[0] == "clips.twitch.tv") {
      ID = url[1];
      link_valid = true;
    } else if (url[2] == "clip") {
      ID = url[3];
      link_valid = true;
    } else {
    }
	
if (link_valid == true){

  const TwitchDuration = fetch('https://api.twitch.tv/helix/clips?id=' + ID,
  {
    headers: {
    'Client-ID': TWITCH_CLIENT_ID,
    'Authorization': 'Bearer ' + string_auth_token
	},
	method: 'GET',
  });
  
  TwitchDuration.then(response => {
    return response.json();
  }).then(data => {
	  
    try {
		videoTitle = data.data[0].title;
		
		duration = data.data[0].duration;
		duration = duration*1000;
		
	  LeftOver = duration-startSeconds;
	  
	if (startSeconds != "0"){
		var videoID = ID + "&&t=" + startSeconds/1000;
	} else {
		var videoID = ID;
	}
	
	if (debug_info == true) {
		SAMMI.popUp('**Input Info**\nString - Link : ' + string_link + '\nAfter Split : ' + url + '\n\n**API Return Info**\nID : ' + videoID + '\nTitle : ' + videoTitle + '\n\nFull Duration : ' + duration + ' (' + duration/1000 + 'sec)\nStart at Duration (t=) : ' + startSeconds + ' (' + startSeconds/1000 + 'sec)\nLeft over Duration : ' + LeftOver + ' (' + LeftOver/1000 + 'sec)\n\n**Extension Return**\nVariable - ID : ' + videoID + '\nVariable - Title : ' + videoTitle + '\nVariable - Duration : ' + LeftOver + '\nVariable - Valid : 1' + '\n \n \n \n \n ')
	}
	
	SAMMI.setVariable(variable_clipid, videoID)
	SAMMI.setVariable(variable_title, videoTitle)
	SAMMI.setVariable(variable_duration, LeftOver)
	SAMMI.setVariable(variable_valid, 1)

    } catch (err) {
		
		SAMMI.setVariable(variable_valid, 0)
		
		if (debug_info == true) {
			SAMMI.popUp('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
		}
		
		SAMMI.notification('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
		SAMMI.alert('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
	
    }
	
    });
	
}  else {
	
	if (debug_info == true) {
		SAMMI.popUp('**Error**\nOriginal Link/Message : ' + string_link + '\n\nAfter Split : ' + url + '\n\nVariable - Valid : 0\n\nLink is detected as NOT a valid link, check Link and try again' + '\n \n \n \n \n ')
	}
	
	SAMMI.notification('**Error**\nLink is detected as NOT a valid link, check Link and try again')
	SAMMI.alert('**Error**\nLink is detected as NOT a valid link, check Link and try again')
	
}
}

//////////////////////////////////////////////////


function twitch_clip_link_test() {
	
var string_link = twitch_link.value || 'https://www.twitch.tv/epivictus/clip/HappyOptimisticMelonJonCarnage-3-hEV77B-JTwMkMj?filter=clips&range=all&sort=time';
var string_auth_token = auth_token.value;
var debug_info = true;
var link_valid = false;

	startSeconds = string_link.replace(/(list=|sort=)/g,"").split("t=")[1];
    if (startSeconds == undefined) {
      startSeconds = '0';
     } else {
      startSeconds = parseInt(startSeconds);
      startSeconds = startSeconds*1000;
    }

    var ID = '';
    url = string_link.replace(/^https?:\/\//, '').split(/[/?]/);
    if (url[0] == "clips.twitch.tv") {
      ID = url[1];
      link_valid = true;
    } else if (url[2] == "clip") {
      ID = url[3];
      link_valid = true;
    } else {
    }
	
if (link_valid == true){

  const TwitchDuration = fetch('https://api.twitch.tv/helix/clips?id=' + ID,
  {
    headers: {
    'Client-ID': TWITCH_CLIENT_ID,
    'Authorization': 'Bearer ' + string_auth_token
	},
	method: 'GET',
  });
  
  TwitchDuration.then(response => {
    return response.json();
  }).then(data => {
	  
    try {
		videoTitle = data.data[0].title;
		
		duration = data.data[0].duration;
		duration = duration*1000;
		
	  LeftOver = duration-startSeconds;
	  
	if (startSeconds != "0"){
		var videoID = ID + "&&t=" + startSeconds/1000;
	} else {
		var videoID = ID;
	}
	
	if (debug_info == true) {
		SAMMI.popUp('**Input Info**\nOriginal Link/Message : ' + string_link + '\nAfter Split : ' + url + '\n\n**API Return Info**\nID : ' + videoID + '\nTitle : ' + videoTitle + '\n\nFull Duration : ' + duration + ' (' + duration/1000 + 'sec)\nStart at Duration (t=) : ' + startSeconds + ' (' + startSeconds/1000 + 'sec)\nLeft over Duration : ' + LeftOver + ' (' + LeftOver/1000 + 'sec)\n\n**Extension Return**\nVariable - ID : ' + videoID + '\nVariable - Title : ' + videoTitle + '\nVariable - Duration : ' + LeftOver + '\nVariable - Valid : 1' + '\n \n \n \n \n ')
	}
	
    } catch (err) {
		
		if (debug_info == true) {
			SAMMI.popUp('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
		}
		
		SAMMI.notification('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
		SAMMI.alert('**Error**\nerror : ' + data.error + '\nstatus : ' + data.status + '\nmessage : ' + data.message)
	
    }
	
  });
  
} else {
	
	if (debug_info == true) {
		SAMMI.popUp('**Error**\nOriginal Link/Message : ' + string_link + '\n\nAfter Split : ' + url + '\n\nVariable - Valid : 0\n\nLink is detected as NOT a valid link, check Link and try again' + '\n \n \n \n \n ')
	}
	
	SAMMI.notification('**Error**\nLink is detected as NOT a valid link, check Link and try again')
	SAMMI.alert('**Error**\nLink is detected as NOT a valid link, check Link and try again')
	
}
}
[insert_over]
{ "deck_data": "{ \"background_color\": 4210752.0, \"on\": 0.0, \"grid_y\": 10.0, \"snap_grid\": true, \"lb_version\": \"2.02.0\", \"background_image\": \"\", \"encrypted\": 0.0, \"adaptive_resizing\": true, \"unique_id\": \"20220208232939851043974\", \"button_list\": [ { \"color\": 16730001.0, \"persistent\": false, \"text\": \"Twitch Clip\\nLink\\nHandler\", \"release_duration\": 0.0, \"queueable\": true, \"command_list\": [ { \"cmd\": 5.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 81.0, \"b0\": \"Remember to add your button trigger,\\nby Channel Point Redeem or by Chat Message.\\n\\nIf need see debug info, tick it on the extension,\\nso you know what info will be return from extension.\", \"v0\": 0.0 }, { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 81.0, \"b0\": \"channel_name = Set your own channel\\\/twitch name below on\\nyou can move the row below into button that you used for Auto Init\\n\\nreason of using channel_name is due to i(Leon :D) have bot account,\\ni need to specify this message is send to my own channel and not bot's channel\", \"v0\": 2.0 }, { \"b1\": \"=\", \"cmd\": 161.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"channel_name\", \"b2\": \"\\\"leonwong93\\\"\" }, { \"b1\": \"global.auth_token\", \"cmd\": 105.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$channel_name$\\\/\", \"v0\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 20.0, \"b0\": \"Delete last result,\\nso the wait until variable exist will work correclty\", \"v0\": 1.0 }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"global.ttv_valid\" }, { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Select how it trigger by, keep only 1, and untick off on the right >>>\", \"v0\": 6.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 1, \"xpan\": 0.0, \"b0\": \"By Chat Message Trigger\", \"v0\": 2.0 }, { \"b1\": \"display_name\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"displayname\" }, { \"b1\": \"0\", \"cmd\": 147.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"message\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 1, \"xpan\": 0.0, \"b0\": \"By Channel Point Redeem\", \"v0\": 2.0 }, { \"b1\": \"display_name\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"displayname\" }, { \"b1\": \"message\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"message\" }, { \"b1\": \"\\\/$message$\\\/\", \"b3\": \"0\", \"cmd\": 91.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"url_check1\", \"b2\": \"twitch.tv\" }, { \"b1\": \"\\\/$message$\\\/\", \"b3\": \"0\", \"cmd\": 91.0, \"obsid\": \"Main\", \"pos\": 14.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"url_check2\", \"b2\": \"clip\" }, { \"b53\": \"\", \"b5\": \"0\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \">\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"url_check2\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 15.0, \"v5\": 1.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 25.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"url_check1\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \">\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"url_check2\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 1.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 9.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 2.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 16.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 318.0, \"b0\": \"The variable you set on extension will be return as Global Variable\\n\\nID is for use on Browser URL Link, with timestamp if available.\\n\\nTitle is Clip's Title, can use as info showing as message\\n\\nDuration is leftover video duration after minus timestamp if available,\\nor full video Duration if timestamp not detected on link.\\n\\nValid return 1 mean clip is valid on twitch and green light for proceed.\\n\\nDefault variable for\\nID : \\\/$global.ttv_clipid$\\\/\\nTitle : \\\/$global.ttv_title$\\\/\\nDuration : \\\/$global.ttv_duration$\\\/\\nValid : \\\/$global.ttv_valid$\\\/\", \"v0\": 1.0 }, { \"variable_clipid\": \"ttv_clipid\", \"cmd\": 0.0, \"variable_title\": \"ttv_title\", \"obsid\": \"Main\", \"pos\": 17.0, \"vis\": 1.0, \"ms\": 0.0, \"string_link\": \"message\", \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"debug_info\": false, \"extcmd\": \"Twitch Clip Link Handler\", \"string_auth_token\": \"global.auth_token\", \"variable_valid\": \"ttv_valid\", \"variable_duration\": \"ttv_duration\", \"ext\": \"Transmitter\" }, { \"cmd\": 5.0, \"obsid\": \"Main\", \"pos\": 18.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 18.0, \"b0\": \"Wait 5sec for api return data,\\nthen check on error\", \"v0\": 4.0 }, { \"b1\": \"5000\", \"cmd\": 153.0, \"obsid\": \"Main\", \"pos\": 19.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"global.ttv_valid\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 20.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"global.ttv_valid\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"0\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 2.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"\\\/$global.channel_name$\\\/\", \"cmd\": 148.0, \"obsid\": \"Main\", \"pos\": 21.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"@\\\/$global.channel_name$\\\/ Error on handling twitch clip link by extension, check the link and try redeem again.\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 12.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 22.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 23.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 41.0, \"b0\": \"Do what you need with the info return from extension,\\nif you using it as Twitch Clip Interruption\\nbelow is the url to be used on browser source\", \"v0\": 1.0 }, { \"b1\": \"{\\\"url\\\":\\\"https:\\\/\\\/leonwong93.github.io\\\/Twitch-Clip-Embed\\\/?clipid=\\\/$global.ttv_clipid$\\\/\\\"}\", \"cmd\": 34.0, \"obsid\": \"Main\", \"pos\": 24.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 1.0, \"xpan\": 0.0, \"b0\": \"\" }, { \"b1\": \"\\\/$global.channel_name$\\\/\", \"cmd\": 148.0, \"obsid\": \"Main\", \"pos\": 25.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"@\\\/$displayname$\\\/ not a valid twitch clip link, check the link again.\" } ], \"press_type\": 0.0, \"x\": 0.40000000000000002220446049250313, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": false, \"init_variable\": \"\", \"deck\": 7.0, \"width\": 0.19999999999999995559107901499374, \"button_id\": \"TwitchClipLinkHandler\", \"button_duration\": 0.0, \"y\": 0.40000000000000002220446049250313, \"switch_deck\": \"\", \"height\": 0.19999999999999995559107901499374, \"release_list\": [ ], \"functions\": 129.0, \"stretch\": 0.0 } ], \"deck_name\": \"Twitch Clip Link Handler\", \"grid_x\": 10.0, \"stretch\": 0.0 }", "unique_id": "20220208232939851043974", "deck_verification_code": "81894c19b25c646e71e857ebbb3f7011890c1d88", "include_image": { } }